package org.itmo;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    public void parallelBFS(int startVertex) {
        final int parallelism = Runtime.getRuntime().availableProcessors();
        final ExecutorService pool = Executors.newFixedThreadPool(parallelism);
        final AtomicBooleanArray visited = new AtomicBooleanArray(V);
        visited.getAndSet(startVertex, true);

        ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();
        queue.add(startVertex);

        // Can't use runnable because of the `pool.invokeAll` signature.
        final List<Callable<Void>> tasks = new ArrayList<>(parallelism);
        final Callable<Void> task = () -> {
            while (!queue.isEmpty()) {
                Integer v = queue.poll();
                if (v != null) {
                    for (int n : adjList[v]) {
                        if (!visited.getAndSet(n, true)) {
                            queue.add(n);
                        }
                    }
                }
            }
            return null;
        };
        for (int i = 0; i < parallelism; i++) {
            tasks.add(task);
        }

        try {
            pool.invokeAll(tasks);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } finally {
            pool.shutdown();
        }
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
